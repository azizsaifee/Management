//
//  TableOfContents.swift
//  Project Management
//
//  Created by Apple on 08/02/23.
//

import Foundation

var dataOfEcoBank = DataDictionary (
    id: "EcoBank",
    
    features: Features(topic: [
        
        "Table View Features" :
            ["About Table View" : ["Links" : "", "Description" : "A table view displays a single column of vertically scrolling content, divided into rows and sections. Each row of a table displays a single piece of information related to your app. Sections let you group related rows together. For example, the Contacts app uses a table to display the names of the user’s contacts."]],
        
        "Diffable Table View Feature" :
            [ "All about it" : ["Links" : "", "Description" : "A table view displays a single column of vertically scrolling content, divided into rows and sections. Each row of a table displays a single piece of information related to your app. Sections let you group related rows together. For example, the Contacts app uses a table to display the names of the user’s contacts."]],
        "Label Flow Issue" :
            [ "label Outline Flow" : ["Links" : "", "Description" : "A table view displays a single column of vertically scrolling content, divided into rows and sections. Each row of a table displays a single piece of information related to your app. Sections let you group related rows together. For example, the Contacts app uses a table to display the names of the user’s contacts."]],
        "Constraints Issue" :
            ["Check For Error" : ["Links" : "", "Description" : "A table view displays a single column of vertically scrolling content, divided into rows and sections. Each row of a table displays a single piece of information related to your app. Sections let you group related rows together. For example, the Contacts app uses a table to display the names of the user’s contacts."]],
        "Credit Token Issue" :
            ["Check For Anomaoly" : ["Links" : "", "Description" : "A table view displays a single column of vertically scrolling content, divided into rows and sections. Each row of a table displays a single piece of information related to your app. Sections let you group related rows together. For example, the Contacts app uses a table to display the names of the user’s contacts."]],
        "Back Button Issue" :
            ["Check Issue" : ["Links" : "", "Description" : "A table view displays a single column of vertically scrolling content, divided into rows and sections. Each row of a table displays a single piece of information related to your app. Sections let you group related rows together. For example, the Contacts app uses a table to display the names of the user’s contacts."]]
    ]),
    
    documentation: Documentation(topic: [
        
        "Onboarding" :
            ["SignUp" : "Refers to the processes in which new hires are integrated into the organization. It includes activities that allow new employees to complete an initial new-hire orientation process, as well as learn about the organization and its structure, culture, vision, mission and values. For some organizations, the onboarding process consists of one or two days of activities; for other organizations, this process may involve a series of activities spanning one or many months.",
             "LogIn" : "Refers to the processes in which new hires are integrated into the organization. It includes activities that allow new employees to complete an initial new-hire orientation process, as well as learn about the organization and its structure, culture, vision, mission and values. For some organizations, the onboarding process consists of one or two days of activities; for other organizations, this process may involve a series of activities spanning one or many months."
            ],
        "Hybrid" : "Concentration",
        
        "Pin Status Management" :
            "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin.",
        
        "Transfer Module" :
            ["Transfer Module" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        
        "Balance Enquiry" :
            ["Balance" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        
        "Push Notifications" :
            ["Notification" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        
        "Active service management" :
            ["Active Service management" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        
        "Authentication" :
            ["2Fa Authentication" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        
        "FLow limits" :
            ["Flow of profile" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        
        "Dual currency and Exchange Rate" :
            ["Latest Rates" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        
        "Reset Pin" :
            [ "How to reset" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        "Language Template" : "sfgfgfg"
    ]),
    
    issues: Issues(topic: [
        
        "Label Flow Issue" :
            [ "label Outline Flow" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        "Constraints Issue" :
            ["Check For Error" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        "Credit Token Issue" :
            ["Check For Anomaoly" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        "Back Button Issue" :
            ["Check Issue" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."]
    ]),
    
    credentials: Credentials(topic: [
        "Login Details" :
            ["Constants" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        "Partial Login Credentials" :
            ["Error on login" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        "Label Flow Issue" :
            [ "label Outline Flow" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        "Constraints Issue" :
            ["Check For Error" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        "Credit Token Issue" :
            ["Check For Anomaoly" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."],
        "Back Button Issue" :
            ["Check Issue" : "I recently needed to do some work with Pin Change Interrupts and it was a bit of a learning experience for me.  As it turns out, they’re actually pretty easy.  I’m posting this so that when I need to look it up in the future, I can easily find it and maybe I can help somebody else out too.I’m going to talk specifically about the ATMEGA328 chip here since it is by far the most common in Arduinos and in my lab, but the information here should transfer easily other ATMEGAs as well.  Before we begin I want to make sure we’re all using the same terms.  There are two main categories of interrupts: Hardware and Software.  A Hardware interrupt is triggered by something outside of the chip like a button while a Software interrupt is triggered from inside the chip like a timer. Within the Hardware interrupt there are two categories: External interrupts and Pin Change Interrupts.  The nomenclature here is confusing since all hardware interrupts are external to the chip.  But the things we are now calling External Interrupts are limited to only a couple pins, while the Pin Change interrupts can occur on all input pins.  For instance, on the ATMEGA328, there are two External Interrupts but 24 Pin Change Interrupts.Each time an interrupt occurs, it triggers the associated ISR (Interrupt Service Routine) assuming you have turned that interrupt on.  Each External Interrupt has its own ISR and they can be triggered independently by either a rising signal, falling signal, or by both.  But the Pin Change Interrupts share an ISR between all the pins on a port (port B, C, and D).  And anytime a pin changes on that port, it calls the port’s ISR which must then decide which pin caused the interrupt.  So Pin Change Interrupts are harder to use but you get the benefit of being about to use any pin."]
    ])
)

